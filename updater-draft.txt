include shared-gdrive("updater-definitions.arr", "19r6H4ZtedGt2ARtWQo1HflN0Ok8vxixJ")

provide:
  find-cursor, get-node-val, update, to-tree, left, right, up, down, is-Cursor,
  type Cursor,
end

include my-gdrive("updater-common.arr")
# END HEADER
# DO NOT CHANGE ANYTHING ABOVE THIS LINE
#
# You may write implementation-specific tests (e.g., of helper functions) in this file.

# You will come up with a Cursor definition, which may have more than
# one variant, and can have whatever fields you need


#//// DATA DEFINITIONS /////
data Cursor<A>: 
    # cursor(above :: Tree<A>, below :: Tree<A>, around :: Tree<A>)
  | cursor(below :: Tree<A>, 
      above :: List<Tree<A>>, 
      right :: List<Tree<A>>, 
      left :: List<Tree<A>>)
end

data ImaginaryNode:
  | img
end

# ðŸš©ðŸš©ðŸš©ðŸš© MENTION THAT LIST OF LEFT & RIGHT NODES ARE TREATED AS A STACK (last in = first out)

# --- test cursors: --
# cursor-list-at-2: points at 2nd element of tree resembling vertical list of 1, 2, 3, 4.
cursor-list-at-2 =
  cursor( 
    node(2,
      [list: 
        node(3, [list: 
            node(4, empty)])]), 
    [list: 
      tree-list-1234, 
      node(img, 
        [list: tree-list-1234])], 
    empty,
    empty)

empty-cursor = 
  cursor(mt,
    [list: node(img, [list: mt])],
    empty,
    empty)
#------------------------------
#/////// HELPER FUNCTIONS FOR FIND-CURSOR /////////
fun find-all-in-list<A>(
    childs :: List<Tree<A>>, 
    pred :: (A -> Boolean), 
    curr-parents :: List<Tree<A>>,
    curr-lefties :: List<Tree<A>>)
  -> {Tree<A>; # tree our cursor points to
    List<Tree<A>>; 
    #| ^ list containing tree's parent, immediate grandparent, 
       immediate great-grandparents, etc... in THAT order.|#
    List<Tree<A>>; # RIGHT siblings
    List<Tree<A>>}: # LEFT siblings
  doc: ```
       desc: Searches depth-first through a list of trees till we find an element for
       which a predicate is true, then partitions the tree around it to mark its
       position.
       (if root node is taken in, we will create a new imaginary node & enter root
       node as the only member in its list of childs. We're thus able to repeat this
       function on root nodes AND child nodes.)

       parameters used for input (intakes new information):
       {{childs}}: list of trees to apply the algorithm to
       {{pred}}: predicate to apply to find the pivot node

       parameters to save important info about current state:
       {{curr-parents}}: used to store the current parents of the pivot node
       {{curr-lefties}}: used to store the current left-siblings of the pivot node

       return: a tuple storing (1) the tree our cursor points to, (2) its (grand)parents, 
       (3) its right siblings, and (4) its left siblings. ```
  cases (List<Tree<A>>) childs:
    | empty => {mt; empty; empty; empty}
    | link(f, r) =>
      cases (Tree<A>) f:
        | mt => {mt; empty; empty; empty}
        | node(v, c) =>
          ask:
            | pred(v) then:
              {f; curr-parents; r; curr-lefties} 
            | otherwise:
              {dwn; upp; rght; lft} = 
                find-all-in-list(c, pred, link(f, curr-parents), empty)
              cases (Tree<A>) dwn:
                |  mt =>
                  find-all-in-list(r, pred, curr-parents,link(f, curr-lefties))
                | node(_, _) =>
                  {dwn; upp; rght; lft}
              end
          end
      end
  end
where:
  # empty tree:
  find-all-in-list(empty, # empty list of childs (on which we would check our predicate)
    is-2, # predicate
    empty, # list of current parents, grandparents, etc...
    empty) # left siblings of node currently being checked
    is {mt; empty; empty; empty}

  find-all-in-list(
    [list: tree-1], 
    is-2, 
    [list: node(img, [list: tree-1])], 
    #| ^ a list of current parent & greater ancestors, arranged sequentially; 
    this allows us to backtrack if tree has many layers. |#
    #| if faced w/ root node, we add another imaginary node above it 
    so we can treat it as a list of 1 child node; this allows our function
    to deal w/ root nodes & child nodes the same way.|#
    empty) 
    is {
    node(2, empty); 
    [list: tree-1, node(img, [list : tree-1])];
    [list: node(3, empty)];
    empty}

  # find 1st instance of 2 in node where root = 2:
  find-all-in-list(
    [list: subnode-2root], 
    is-2, 
    [list: node(img, [list: subnode-2root])], 
    empty)
    is {
    subnode-2root; 
    [list: node(img, [list : subnode-2root])]; # cursor points at entire tree.
    empty;
    empty}

  # find 1st instance of 2 in tree where first child node is 2:
  find-all-in-list(
    [list: tree-2], 
    is-2, 
    [list: node(img, [list: tree-2])], 
    empty) 
    is {
    subnode-2root; # subnode with root of 2
    [list: tree-2, node(img, [list: tree-2])]; # above, we have direct parent tree & direct grandparent tree. (Includes direct parent, allowing us to backtrack.)
    [list: subnode-3root];
    empty}

  # find 1st instance of 2 in tree where first child tree has no 2, but 2nd one does:
  find-all-in-list(
    [list: tree-3], 
    is-2, 
    [list: node(img, [list : tree-3])], 
    empty)
    is {
    subnode-2root; # below: subnode with root of 2
    [list: tree-3, node(img, [list : tree-3])]; # above: parents, grandparents
    [list: subnode-3root]; # right: our 3rd sub-tree (doesn't include 2)
    [list: subnode-no-2]} # left: our 1st sub-tree (doesn't include 2)

  # find 1st instance of 2 in tree where 3rd and 4th nodes in the same row BOTH have 2 as a child:
  find-all-in-list(
    [list: tree-4], 
    is-2, 
    [list: node(img, [list : tree-4])], 
    empty)
    is {
    subnode-2root; # picks leftermost node instead of rightermost node
    [list: tree-4, node(img, [list : tree-4])]; 
    [list: subnode-3root]; 
    [list: subnode-no-2, subnode-3root-no-2]
  }
end

fun find-cursor<A>(tree :: Tree<A>, pred :: (A -> Boolean)) -> Cursor<A>:
  doc: "Outputs a cursor that points at the first instance of a tree node for which predicate returns true."

  # our tuple from find-all-in-list provides essential info for cursor:
  {dwn; upp; rght; lft} 
  = find-all-in-list(
    [list: tree], 
    pred, 
    [list: node(img, [list: tree])], 
    # ^ we insert imaginary node to satisfy helper function's contract.
    empty)

  cases(Tree) dwn:
      # raise error if the cursor is pointing at empty tree:
    | mt => raise("Could not find node matching predicate")
      # else, insert contents of tuple:
    | node(_, _) =>
      cursor(dwn, upp, rght, lft)
  end
where:
  # empty tree raises error.
  find-cursor(mt, is-2) raises "Could not find node matching predicate"

  # Root of tree-1 has child nodes 2 & 3. Cursor points at first instance of 2.
  find-cursor(tree-1, is-2) is cursor(
    node(2, empty), 
    [list: tree-1, node(img, [list: tree-1])], 
    [list: node(3, empty)],
    empty)

  # tree-2 has TWO subnodes containing 2. Cursor points at leftermost, higher instance of 2:
  find-cursor(tree-2, is-2) is cursor(
    subnode-2root, 
    [list: tree-2, node(img, [list: tree-2])], 
    [list: subnode-3root],
    empty)
end
#--------end of find-cursor------------

#/////// HELPER FUNCTIONS FOR UP, DOWN, LEFT, RIGHT //////
fun find-siblings<A>(
    parent :: Tree<A>%(is-node), 
    childs :: List<Tree<A>>%(is-link), 
    special-child :: Tree<A>,
    current-left :: List<Tree<A>>) -> 
  {List<Tree<A>> ; # Left siblings 
    List<Tree<A>>}: # Right siblings
  doc: "Finds left & right siblings of special-child. Returns them as tuple of 2 stacks."
  cases(List) childs:
    | empty => {empty; empty}
    | link(f,r) => 
      ask: 
        | f == special-child
          then: {current-left; r}
        | otherwise:
          find-siblings(
            parent, 
            r, 
            special-child, 
            link(f, current-left) # adds child to current-left if not special-child
            )
      end   
  end
where:
  # a LONG list of children:
  long-children = 
    [list: 
      node(1, empty), node(2, empty), node(3, empty), node(4, empty),  node(5, empty)]

  # find siblings of child 3:
  find-siblings(
    node(1, long-children), # parent,
    long-children, # childs
    node(3, empty), # special child
    empty) # stores children currently to the left 
  is
  {[list: node(2, empty), node(1, empty)]; 
    #| ^left-child is in reversed order because we're both as stacks (1st in = 1st out)|#
    [list: node(4, empty), node(5, empty)]}
end

fun up<A>(cur :: Cursor<A>) -> Cursor<A>:
  doc: "Navigates cursor upwards."
  ask:
      # if only node above our cursor is imaginary node, we can't move upwards.
    | length(cur.above) == 1 
      then: raise("Invalid movement")
    | otherwise:
      #| now that we've moved up 1 node, our old node's immediate parent
        (first in our stack of above-trees) becomes the tree we're pointing at: |#
      new-below = cur.above.first 
      #| our new above-list becomes every ancestor tree EXCEPT our old parent.|#
      new-above = cur.above.rest 

      # now that we've moved upwards, we must recalculate our new node's siblings:
      {new-left; new-right} = 
        find-siblings(
          new-above.first, # immediate parent of current child
          new-above.first.children, # siblings of current child
          new-below, # current child (find siblings of its root.)
          empty) 

      # reconstruct cursor:
      cursor(new-below, new-above, new-right, new-left)
  end
where:
  # cursor-list-at-2 points at 2nd element of tree resembling vertical list.
  # Simplest case: can we move up a tree resembling a vertical list?
  up(cursor-list-at-2)
    is 
  cursor(
    tree-list-1234, # Below
    [list: node(img, [list: tree-list-1234])], # Above
    empty, # Right
    empty # Left
    )

  # If we're at the root, we can't move up anymore:
  up(
    cursor(
      subnode-2root, 
      [list: node(img, [list: subnode-2root])], 
      [list: ], 
      empty))  
    raises ""

  # When we move up a layer, list of left & right children should change.
  old-parent = 
    node(3, [list: node(4, empty), node(5, empty), node(6, empty)])

  new-below = old-parent

  up(
    cursor(node(5, empty), # tree our cursor is pointing at
      # list of parent & ancestor trees:
      [list: 
        old-parent, 
        deep-tree, 
        node(img, [list: deep-tree])], 
      [list: node(6, empty)], # list of right childs
      [list: node(4, empty)] # list of left childs
      ))
    is cursor(
    new-below, [list: deep-tree, node(img, [list: deep-tree])],
    [list: node(7, empty)],
    [list: node(2, empty)]
    )
end

fun left<A>(cur :: Cursor<A>) -> Cursor<A>:
  doc: "Navigates cursor leftwards."
  cases(List<Tree<A>>) cur.left:
    | empty => raise("Invalid movement")
    | link(f,r) =>
      new-down = f
      new-up = cur.above # same parent
      new-right = link(cur.below, cur.right)
      new-left = r 
      cursor(new-down, new-up, new-right, new-left)
  end
where:
  # cursor-list-at-2 points at 2nd element of tree resembling vertical list.
  # Cursor can't move left when tree resembles vertical list:
  left(cursor-list-at-2) raises "Invalid movement"

  # move 1 node left; below node should change from 3 to 2:
  parent-1 = [list: tree-1, node(img, [list: tree-1])] # should remain constant
  one-left = 
    left(cursor(
        node(3, empty), parent-1,
        empty, [list: node(2, empty)])) 
  one-left is 
  cursor(
    node(2, empty), parent-1,
    [list: node(3, empty)], empty)
  #if my left (i.e. cur.left) is empty, raise error (cases for list)

  # testing a double left, which should fail (no more sibling nodes):
  left(one-left) raises "Invalid movement" 

  # In tree-2, move left from subnode of root 3 to subnode of root 2:
  left(cursor(
      subnode-3root, [list: tree-2, node(img, [list: tree-2])],
      empty, [list: subnode-2root])) is 
  cursor(
    subnode-2root, [list: tree-2, node(img, [list: tree-2])],
    [list: subnode-3root], empty)
end

fun right<A>(cur :: Cursor<A>) -> Cursor<A>:
  doc: "Navigates cursor rightwards."
  cases(List<Tree<A>>) cur.right:
    | empty => raise("Invalid movement")
    | link(f,r) =>
      new-down = f
      new-up = cur.above # same parent
      new-right = r
      new-left = link(cur.below, cur.left)
      cursor(new-down, new-up, new-right, new-left)
  end
where:
  # Cursor can't move right when tree resembles vertical list:
  right(cursor-list-at-2) raises "Invalid movement"

  # move 1 node right; below node should change from 2 to 3:
  parent-1 = [list: tree-1, node(img, [list: tree-1])] # should remain constant
  one-right = 
    right(cursor(
        node(2, empty), parent-1,
        [list: node(3, empty)], empty)) 
  one-right is 
  cursor(
    node(3, empty), parent-1,
    empty, [list: node(2, empty)])

  # testing a double right, which should fail (no more sibling nodes):
  right(one-right) raises "Invalid movement" 

  # In tree-2, move right from subnode of root 2 to subnode of root 3:
  parent-2 = [list: tree-2, node(img, [list: tree-2])]
  right(cursor(
      subnode-2root, parent-2,
      [list: subnode-3root], empty)) is 
  cursor(
    subnode-3root, parent-2,
    empty, [list: subnode-2root])
end

fun down<A>(cur :: Cursor<A>, child-index :: Number ) -> Cursor<A>:
  doc: "Navigates cursor downwards" 
  ask: 
      #| returns error if the tree we're navigating from is 
         a leaf, or we enter an index for which no child exists.|#
    | (child-index >= length(cur.below.children)) 
      or (child-index < 0)  
      then: raise("Invalid movement")
    | otherwise:
      new-below = cur.below.children.get(child-index)
      new-above = link(cur.below, cur.above) 
      #{new-left, new-right} = cur.below.children.split-at(child-index)
      {new-left; new-right} = find-siblings(
        cur.below, # parent
        cur.below.children, # list of siblings of current child
        new-below, # special child (we want to find siblings around it)
        empty)

      cursor(new-below, new-above, new-right, new-left)
  end
where:
  # Simplest case: can we move down a tree resembling a vertical list?
  # cursor-list-at-2 points at 2nd element of tree resembling vertical list.
  down(cursor-list-at-2, 0)
    is 
  cursor(
    node(3, [list: node(4, empty)]),
    [list:
      node(2, [list: node(3, [list: node(4, [list: ])])]), 
      tree-list-1234, 
      node(img, [list: tree-list-1234])], 
    empty, empty)

  # If we're at a leaf node, we can't move down anymore.
  # (tree-1 has a root of 1 and 2 & 3 as its children. Cursor points at 2.)
  down(
    cursor(
      node(2, empty), 
      [list: node(img, [list: tree-1])], 
      empty, 
      empty), 0)  
    raises ""

  # When we move down a layer, list of left & right children should change.
  # Cursor points at root of deep-tree
  down(
    cursor(deep-tree, # below
      [list: node(img, [list: deep-tree])], # parent tree above
      empty, # left
      empty), # right
    0)
    is cursor(
    node(2, empty), 
    [list: deep-tree, node(img, [list: deep-tree])], 
    # right/left siblings change when cursor moves:
    [list: node(3, 
        [list: 
          node(4, empty), 
          node(5, empty), 
          node(6, empty)]),
      node(7, empty)], 
    empty) 
end

fun update-above<A>(parents :: List<Tree<A>>, child :: Tree<A>, old-child :: Tree<A>) -> List<Tree<A>>:
  doc: "goes through our list of parents & grandparents, etc... and replaces updated sub-tree with new tree in every ancestor tree."
  cases (List<Tree<A>>) parents:
    | empty => empty
    | link(f, r) =>
      new-parent = node(f.value, f.children.map(
          {(curr-node :: Tree<A>):
            if curr-node == old-child:
              child
            else:
              curr-node
            end}))
      link(new-parent, update-above(r, new-parent, f))
  end
where:
  # tree 1 has root 1 and children 2 & 3. Cursor points at root 1. We replace 2 with 77.
  tree-1-updated =
    node(1, 
      [list: node(77, empty), node(3, empty)])

  update-above(
    [list: tree-1, node(img, [list: tree-1])], 
    node(77, empty), # <-- replacement child
    node(2, empty)) # <-- old child
    is 
  [list: tree-1-updated, node(img, [list: tree-1-updated])]

  #tree has multiple 2s. Take the leftmost, uppermost 2 and replace it with 77.
  # ðŸš©ðŸš©ðŸš© write this: update-above(...)

end

fun update<A>(cur :: Cursor<A>, func :: (Tree<A> -> Tree<A>)) -> Cursor<A>:
  new-below = func(cur.below)
  new-above = update-above(cur.above, new-below, cur.below)
  cursor(new-below, new-above, cur.right, cur.left)
end

fun clean<A>(root :: Tree<A>) -> Tree<A>:
  doc: "removes all instances of mt that aren't at a leaf."
  cases (Tree<A>) root:
    | mt => mt
    | node(v, c) =>
      new-children = c.filter(
        {(curr-node):
          not(curr-node == mt)})
      node(v, new-children.map(clean))
  end
where:
  clean(mt) is mt
  clean(tree-1) is tree-1
  clean(malformed-tree-2a) is tree-2
  clean(malformed-tree-2b) is tree-2
end

fun to-tree<A>( cur :: Cursor<A> ) -> Tree<A>:
  doc: "Removes extraneous mt subtrees, then converts cursor to the tree it represents."
  # remove mts that aren't at bottom, then output tree
  ask: 
      #i.e. the only node above is our imaginary helper node
    | length(cur.above) == 1 
      then: clean(cur.below)
    | otherwise:
      clean(cur.above.get(
          (length(cur.above) - 2))) # get(length(...)) extracts second to last parent in stack, i.e. the original root (after our imaginary root)  
  end
where:
  #ðŸš©ðŸš©ðŸš©ðŸš© SEPERATE INTO ANNOTATED CHECK BLOCKS
  ok-subnode = node(9, empty)
  malformed-subnode-1 = node(6, [list: mt, node(5, empty)])

  tree-extraneous-mt = node(5, [list: ok-subnode, malformed-subnode-1, mt])
  cur-extraneous-mt = 
    # points at root of malformed tree
    cursor(
      tree-extraneous-mt,
      [list: node(img, [list: tree-extraneous-mt])],
      empty,
      empty)

  cleaned-tree = node(5, 
    [list: 
      node(9, empty), 
      node(6, [list: node(5, empty)])])

  to-tree(cur-extraneous-mt) is cleaned-tree

  leaf-extraneous-mt = node(5, [list: mt, mt, mt])
  cur-malformed-leaf = 
    cursor(
      leaf-extraneous-mt,
      [list: node(img, [list: leaf-extraneous-mt])],
      empty, 
      empty)
  fixed-leaf = node(5, empty)
  to-tree(cur-malformed-leaf) is fixed-leaf

  # testing cursor pointing at empty tree:
  to-tree(
    empty-cursor)
    is mt

  # testing that cursor pointing at sub-tree still returns whole tree
  #ðŸš©ðŸš©ðŸš©ðŸš©
end

fun get-node-val<A>(cur :: Cursor<A>) -> Option<A>: 
  cases(Tree) cur.below:
    | mt => none
    | node(v,_) =>
      some(v)
  end
end
